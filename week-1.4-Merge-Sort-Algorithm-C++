// Merge sort Algorithm 
// - sorting algorithm that works by dividing array into smaller subarrays, 
// sorting each subarray, and then merging sorted subarrays back together to form final sorted array

// - in simple terms, we can say that process of merge sort is to divide array into two halves, 
// sort each half, and then merge sorted halves back together
// - this process is repeated until entire array is sorted

// How does Merge Sort work?
// - merge sort is recursive algorithm that continuously splits array in half until it cannot be further divided 
// - array has only one element left (an array with one element is always sorted)
// - then sorted subarrays are merged into one sorted array

// C++ program for Merge Sort
#include <bits/stdc++.h>
using namespace std;

// Merges two subarrays of array[].
// First subarray is arr[begin..mid]
// Second subarray is arr[mid+1..end]
void merge(int array[], int const left, int const mid,
		int const right)
{
	int const subArrayOne = mid - left + 1;
	int const subArrayTwo = right - mid;

	// Create temp arrays
	auto *leftArray = new int[subArrayOne],
		*rightArray = new int[subArrayTwo];

	// Copy data to temp arrays leftArray[] and rightArray[]
	for (auto i = 0; i < subArrayOne; i++)
		leftArray[i] = array[left + i];
	for (auto j = 0; j < subArrayTwo; j++)
		rightArray[j] = array[mid + 1 + j];

	auto indexOfSubArrayOne = 0, indexOfSubArrayTwo = 0;
	int indexOfMergedArray = left;

	// Merge the temp arrays back into array[left..right]
	while (indexOfSubArrayOne < subArrayOne
		&& indexOfSubArrayTwo < subArrayTwo) {
		if (leftArray[indexOfSubArrayOne]
			<= rightArray[indexOfSubArrayTwo]) {
			array[indexOfMergedArray]
				= leftArray[indexOfSubArrayOne];
			indexOfSubArrayOne++;
		}
		else {
			array[indexOfMergedArray]
				= rightArray[indexOfSubArrayTwo];
			indexOfSubArrayTwo++;
		}
		indexOfMergedArray++;
	}

	// Copy the remaining elements of
	// left[], if there are any
	while (indexOfSubArrayOne < subArrayOne) {
		array[indexOfMergedArray]
			= leftArray[indexOfSubArrayOne];
		indexOfSubArrayOne++;
		indexOfMergedArray++;
	}

	// Copy the remaining elements of
	// right[], if there are any
	while (indexOfSubArrayTwo < subArrayTwo) {
		array[indexOfMergedArray]
			= rightArray[indexOfSubArrayTwo];
		indexOfSubArrayTwo++;
		indexOfMergedArray++;
	}
	delete[] leftArray;
	delete[] rightArray;
}

// begin is for left index and end is right index
// of the sub-array of arr to be sorted
void mergeSort(int array[], int const begin, int const end)
{
	if (begin >= end)
		return;

	int mid = begin + (end - begin) / 2;
	mergeSort(array, begin, mid);
	mergeSort(array, mid + 1, end);
	merge(array, begin, mid, end);
}

// UTILITY FUNCTIONS
// Function to print an array
void printArray(int A[], int size)
{
	for (int i = 0; i < size; i++)
		cout << A[i] << " ";
	cout << endl;
}

// Driver code
int main()
{
	int arr[] = { 12, 11, 13, 5, 6, 7 };
	int arr_size = sizeof(arr) / sizeof(arr[0]);

	cout << "Given array is \n";
	printArray(arr, arr_size);

	mergeSort(arr, 0, arr_size - 1);

	cout << "\nSorted array is \n";
	printArray(arr, arr_size);
	return 0;
}

// Complexity Analysis of Merge Sort
// Time Complexity: 
// O(N log(N))
// - recursive algorithm and time complexity can be expressed as following recurrence relation
// T(n) = 2T(n/2) + θ(n)
// - above recurrence can be solved either using Recurrence Tree method or Master method
// - falls in case II of Master Method and solution of recurrence is θ(Nlog(N))
// - time complexity of Merge Sort isθ(Nlog(N)) in all 3 cases (worst, average, and best) as merge 
// sort always divides array into two halves and takes linear time to merge two halves

// Auxiliary Space: O(N), In merge sort all elements are copied into an auxiliary array. So N auxiliary space is required for merge sort.

// Applications of Merge Sort:
// Sorting large datasets: 
// - particularly well-suited for sorting large datasets due to its guaranteed worst-case time complexity of O(n log n)
// External sorting: 
// - commonly used in external sorting, where data to be sorted is too large to fit into memory
// Custom sorting: 
// - can be adapted to handle different input distributions, such as partially sorted, nearly sorted, or completely unsorted data

// Advantages of Merge Sort:
// Stability: 
// - stable sorting algorithm, which means it maintains relative order of equal elements in input array
// Guaranteed worst-case performance: 
// - worst-case time complexity of O(N logN), which means it performs well even on large datasets
// Parallelizable: 
// - naturally parallelizable algorithm, which means it can be easily parallelized to take advantage of multiple processors or threads

// Drawbacks of Merge Sort:
// Space complexity: 
// - requires additional memory to store merged sub-arrays during sorting process 
// Not in-place: 
// - Merge sort is not in-place sorting algorithm, which means it requires additional memory to store sorted data
// this can be disadvantage in applications where memory usage is concern
// Not always optimal for small datasets: 
// - For small datasets, Merge sort has higher time complexity than some other sorting algorithms, such as insertion sort
// this can result in slower performance for very small datasets



