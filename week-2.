// --------------------------------------------------------------------------------------------
Asymptotic Bounding 

- single for loop = linear time ? O(n) ? 
for(int i = 0; i < n; i++) {
}
- 2 for loops = quadratic time ? O(n^2) ? 
for(int i = 0; i < n; i++) {
    for(int j = 0; j < 10; j++) {
}
}
- not always 
- we can only see how well algorithm works, with very large inputs 

Insertion Sort: 2 n2 
Merge Sort: 50 n log(n)

Computer A: 10,000,000,000 instructions/second
Computer B: 10,000,000     instructions/second 

Computer A Time: 5.5 hours 
Computer B Time: 20 minutes 

- althrough computer B is 1000 times slower, it is able to perform much faster than computer 1

Linear Time O(n)
- we have a graph and inputs: y=1/2x, y=x, y= 2x, y=3x
- on graph we can see that all of the inputs have same behavior 

Asymptotic complexity 
- whole point of taking asymptotic measures is so that we know how a graph is behaving
when input is very large, that is when we see graphs true colors 
- this is also reason why we drop constants O(1/2*n), we drop off 1/2 
- that is because all of these inputs in graphs will perform in very same manner 
with very very large inputs 

log n time: O(log(n))
linear time: O(n)
quadratic time: O(n^2)
qubic time: O(n^3)
factorial time: O(n!)
exponential time: O(2^n)
- we are describing a class of functions, a class of behaviors 

