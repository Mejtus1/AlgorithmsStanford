// --------------------------------------------------------------------------------------
Big Oh notation basic examples 

Example 1: 
- these examples serve as sanity check of what Big O is doing what its intendet purpose is 
                     k 
Claim: if T(n) = a  a  + ...... + a, n + n    then 
          k       k                       o
T(n) = O(n )
Proof: 
- how does one show that one function is bigger than other = whole key is to find a pair of constants
- choose no = 1 and c = |ak| + |ak1| + ... + |a1| + |a0| 
We need to show that for all n >= 1, T(n) = c * n(to pwoer of k)
We have for every n >= 1, 
T(n) <= |ak|n(to pwoer of k) + ... + |a1|n + |a0|
- common power of n, we replace all of these n to n(to power of k)
     <= |ak|n(to pwoer of k) + ... + |a1|n(to power of k) + |a0|n(to power of k)
     <= c * n(to power of k)
- we have proven that T(n) = O(n(to power of k))

Example 2: 
Claim: for every K >= 1, n(to power of k) is not O(n(to power of k-1))
Proof: by contradiction(we astablish what is actually false)
- suppose n(to power of k) = O(n(to k power - 1))
- then 2 constants c1n0 > 0, such that n(to pwoer of k) <= c * n(to power of k-1), for all n >= n0 
Put then can ceiling n(to pwoer of k-1) from both sides 
n <= c, for all n >= n0 
False statement is clearly false contradiction

// --------------------------------------------------------------------------------------
Big Omega, Theta 

Omega = Ω
Theta = Θ

- Omega notation, denoted as Ω, is a way to describe lower bound of time or space complexity of algorith, 
- similar to big O notation, but instead of focusing on upper bound or worst-case scenario, omega notation focuses on lower bound or best-case scenario
- when is said that function T(N) is Ω(F(N)), it means that for sufficiently large inputs 
(N), T(N) will always be greater than or equal to constant multiple of F(N)
- in simpler terms, T(N) grows at least as fast as F(N) for large enough inputs

Omega Notation 
Definition: T(n) = Ω(f(n)) 
if and only if constants c1n0 such that
T(n) >= c * f(n) for all n >= n0 

Theta Notation 
- theta notation tells us that behavior of T(N) is tightly bound by behavior of F(N) as N becomes large 
- it signifies equivalence or balance in growth rates between the two functions
- denoted as Θ, is mathematical notation used in analysis of algorithms to describe growth rate of functions
- it represents tight bound between two functions, indicating that one function grows at same rate as other, up to constant factors, for sufficiently large inputs
- when is said T(N) is Θ(F(N)), it means that 
- T(N) grows at same rate as F(N), neither faster nor slower, for sufficiently large values of N,
because theta notation indicates tight bound between two functions

- describing it as T(N) being "sandwiched" between two multiples of F(N) reinforces this idea
- it means that T(N) consistently falls between two constant multiples of F(N) as N becomes large
- this sandwiching implies equality, indicating that behavior of T(N) closely mirrors that of F(N) in terms of growth rate

Definition: T(n) = Θ(f(n)) if and only if 
T(n) = O(f(n)) and T(n) = Ω(f(n))
Equivalent: constants c1, c2, n0 such that
c1f(n) <= T(n) <= c2f(n)
for all n>n0 

Exercise 1: 
Let T(n) = 1/2n(to power of 2) + 3n. Which of following staements are true ? 
a) T(n) = O(n)
b) T(n) = Ω(n)
c) T(n) = Θ(n(to power of 2))
d) T(n) = O(n(to power of 3))

b), c), d) are true 
b) [n0 = 1, c = 1/2]
c) [n0 = 1, c1 = 1/2, c2 = 4]
d) [n0 = 1, c = 4]

Exercise 2: 
Claim: 2(to power of n + 10) = O(2(to power of n))
Proof: 
- we need to proove that there exists 2 constants c1 n0, such that for all positive n >= n0 
2(to power of n + 10) <= c * 2(to power of n)
Note: 2(to power of n+10) = 2(to power of 10) * 2(to power of n)
= (1024) * 2(to power of n)             
                                      [c * 2(to power of n) = 1024 * 2(to power of n)]
So: 
- if we choose c = 1024, n0 = 1 then OUR ASSUMPTION HOLDS 

Exercise 3: 
Claim: 2(to power of 10n) is not O(2(to power of 2))
Proof: by contradiction. If 2(to power of 10n) = O(2(to power of n)), then 
constants c1 n0 > 0 such that 2(to power of 10n) <= c * 2(to power of n)    for all numbers
both sides divided by 2(to the n power): 
2(to power of 9n) <= c for all numbers n >= n0
- certainly false 

Exercise 4: 
Claim: for every pair of (positive) functinos f(n), g(n), 
max[f,g] = O(f(n)+ g(n))
- maximum of two functinos is a theta of the sum of TWO FUNTIN2(to power of n 

Proof: [max{f,g} = O(f(n) + g(n))]
For every n, we have
    max{f(n),g(n)} <= f(n) + g(n)
and 
    2max{f(n),g(n)} >=  f(n) + g(n)
    /2 
    max{f(n),g(n)} >= 1/2(f(n) + g(n))
thus: 1/2(f(n) + g(n)) <= max{f(n),g(n)} <= f(n) + g(n)
for all n >= 1 

=> max{f,g} = O(f(n) + g(n)) [where n0 = 1, c1 = 1/2, c2 = 1]

Exercise 5:
Arrange following functions in increasing order of growth rate with g(n) following f(n)
only if f(n) = O(g(n))
a) 2(topowerof2(topowerofn))
b) 2(topowerofn(topowerof2))
c) n(to power of 2) log n 
d) n
e) n(to power of 2(to power of n))

d) n <- c) n(to power of 2) log n <- b) 2(topowerofn(topowerof2)) <- a) 2(topowerof2(topowerofn)) <- e) n(to power of 2(to power of n))

Exercise 6: 
3-way-Merge Sort: 
Suppose that instead of dividing in half at each step of Merge Sort, you divide into thirds, 
sort each third, and finally combine all of them using a three-way merge subroutine. 
What is the overall asymptotic running time of this algorithm? 

- in three-way merge sort algorithm where array is divided into thirds at each step, overall asymptotic running time can be analyzed as follows:

Divide: 
- dividing array into thirds at each step requires 

Conquer: 
- sorting each third of array independently requires time
- each third has size of and time complexity of sorting each third is same as that of standard merge sort

Merge: 
- combining all thirds using three-way merge subroutine has linear time complexity O(n), 
as it involves comparing and merging elements from all thirds

T(n) = 3 * T(n/3) + O(n) 
Master Theorem = O(n log n)

Python Code for three way merge sort algorithm 
-------------------------------------------------------------|
def merge(arr, left, middle1, middle2, right):               |
    n1 = middle1 - left + 1                                  |
    n2 = middle2 - middle1                                   |
    n3 = right - middle2                                     |
                                                             |
    # Create temporary arrays to store the subarrays         |
    L = arr[left:middle1+1]                                  |
    M = arr[middle1+1:middle2+1]                             |
    R = arr[middle2+1:right+1]                               |
                                                             |
    # Initialize indices for merging                         |
    i = j = k = 0                                            |
    m = len(L)                                               |
    n = len(M)                                               |
    o = len(R)                                               |
                                                             |
    # Merge the three subarrays                              |
    while i < m and j < n and k < o:                         |
        if L[i] <= M[j] and L[i] <= R[k]:                    |
            arr[left] = L[i]                                 |
            i += 1                                           |
        elif M[j] <= L[i] and M[j] <= R[k]:                  |
            arr[left] = M[j]                                 |
            j += 1                                           |
        else:                                                |
            arr[left] = R[k]                                 |
            k += 1                                           |
        left += 1                                            |
                                                             |
    # Copy the remaining elements of L[], M[], and R[],if any|
    while i < m:                                             |
        arr[left] = L[i]                                     |
        i += 1                                               |
        left += 1                                            |
    while j < n:                                             |
        arr[left] = M[j]                                     |
        j += 1                                               |
        left += 1                                            |
    while k < o:                                             |
        arr[left] = R[k]                                     |
        k += 1                                               |
        left += 1                                            |
                                                             |
def three_way_merge_sort(arr, left, right):                  |
    if left < right:                                         |
        # Calculate midpoints                                |
        middle1 = left + (right - left) // 3                 |
        middle2 = left + 2 * (right - left) // 3             |
                                                             |
        # Sort the three thirds recursively                  |
        three_way_merge_sort(arr, left, middle1)             |
        three_way_merge_sort(arr, middle1 + 1, middle2)      |
        three_way_merge_sort(arr, middle2 + 1, right)        |
                                                             |
        # Merge the sorted thirds                            |
        merge(arr, left, middle1, middle2, right)            |
                                                             |
# Example usage:                                             |
arr = [12, 11, 13, 5, 6, 7, 3, 2, 1]                         |
print("Original array:", arr)                                |
three_way_merge_sort(arr, 0, len(arr) - 1)                   |
print("Sorted array:", arr)                                  |
-------------------------------------------------------------|

- recurrence relation for time complexity of three-way merge sort algorithm can be expressed as:
T(n) = 3 * T(n/3) + O(n)

Where: 
T(n) is time complexity of sorting array of size n
O(n) represents time complexity of merging three sorted thirds

Applied master theorem for divide and conquer recurrences: 
where: 
- a is number of subproblems
- b is factor by which problem size is reduced
- f(n) is time complexity of work done outside recursive calls

in case of three-way merge sort: 
- a = 3 subproblems for merging 
- b = 3 array dividend into thirds
- f(n) = O(n) time complexity of merging 

// ---------------------------------------------------------------------------

Exercise 7: 
In this programming assignment you will implement one or more of the integer multiplication algorithms described in lecture.

To get the most out of this assignment, your program should restrict itself to multiplying only pairs of single-digit numbers.  You can implement the grade-school algorithm if you want, but to get the most out of the assignment you'll want to implement recursive integer multiplication and/or Karatsuba's algorithm.

So: what's the product of the following two 64-digit numbers?

3141592653589793238462643383279502884197169399375105820974944592

2718281828459045235360287471352662497757247093699959574966967627

To find the product of the given 64-digit numbers, we can use Karatsuba's algorithm, an efficient algorithm for multiplying large numbers. 
Split each number into two halves of equal length.
Recursively compute the products of these halves.
Compute the cross products of the halves and add them appropriately.
Combine the results to obtain the final product.

PYTHON CODE 
---------------------------------------------------------------------------
def karatsuba_multiplication(x, y):
    if x < 10 or y < 10:
        return x * y
    
    # Calculate the number of digits in each number
    n = max(len(str(x)), len(str(y)))
    n2 = n // 2
    
    # Split the numbers into halves
    a, b = divmod(x, 10**n2)
    c, d = divmod(y, 10**n2)
    
    # Recursively compute the products of the halves
    ac = karatsuba_multiplication(a, c)
    bd = karatsuba_multiplication(b, d)
    ad_bc = karatsuba_multiplication((a + b), (c + d)) - ac - bd
    
    # Combine the results to obtain the final product
    return (10**(2*n2)) * ac + (10**n2) * ad_bc + bd

# Define the 64-digit numbers
num1 = 3141592653589793238462643383279502884197169399375105820974944592
num2 = 2718281828459045235360287471352662497757247093699959574966967627

# Calculate the product using Karatsuba's algorithm
product = karatsuba_multiplication(num1, num2)
print("Product of the two 64-digit numbers:", product)
---------------------------------------------------------------------------
Combined number: 
8539734222673567065463550869546574495034888535765114961879601127067743044893204848617875072216249073013374895871952806582723184
